#!/usr/bin/env ruby

require 'rubygems'
require 'nokogiri'
require 'webrick'
require 'kaistsms'
require 'pp'

server = WEBrick::HTTPServer.new :Port=>(ARGV[0]||4225).to_i

server.mount_proc('/') do |req,res|
  res['ETag'] = nil
  res['Last-Modified'] = Time.now + 100**4
  res['Cache-Control'] = 'no-store, no-cache, must-revalidate, post-check=0, pre-check=0'
  res['Pragma'] = 'no-cache'
  res['Expires'] = Time.now - 100**4

  res.status = 200
  res['Content-Type'] = 'text/html'

  builder = Nokogiri::HTML::Builder.new(:encoding => 'UTF-8') do |html|
    html.html do
      html.head do
        html.meta :'http-equiv' => 'Content-Type', :content => 'text/html; charset=utf-8'
        html.meta :name => 'viewport', :content => 'initial-scale=1.0; user-scalable=no; maimum-scale=1.0; minimum-scale=1.0; width=device-width'
        html.style do
          html.text <<-EOS
          *{margin:0;padding:0;font-family:Dotum,"돋움";}
          ul li{list-style:none;}
          ol{margin-left:2em;}
          input,textarea{border:1px solid;width:100%;font-size:20px;}
          textarea{height:5em;}
          body{padding:10px;}
          pre{border:1px solid;word-wrap:break-word;word-break:break-all;}
          .footer{text-align:center;border-top:1px solid;}
          a{text-decoration:none;}
          EOS
        end
        html.script do
          html.text <<-EOS
            function $() {
              var ret = [];
              for(var i=0; i < arguments.length; i++) {
                if (typeof arguments[i] == 'string') {
                  ret[ret.length] = document.getElementById(arguments[i]);
                  } else {
                  ret[ret.length] = arguments[i];
                }
              }
              return ret[1]?ret:ret[0];
            }

            function check_msg_byte(obj) {
              var cnt = 0
              for(var i=0;i<obj.value.length;i++)
                if(escape(obj.value.charAt(i)).substr(0,2) == "%u")
                  cnt++;
              var bytes = obj.value.length + cnt;
              if(bytes>80)
                $('msg_byte').style.color="red";
              else
                $('msg_byte').style.color="";
              $('msg_byte').innerHTML = obj.value.length + cnt;
              return true;
            }

            function setCookie(c_name,value,expiredays)
            {
              var exdate=new Date();
              exdate.setDate(exdate.getDate()+expiredays);
              document.cookie=c_name+ "=" +escape(value)+
              ((expiredays==null) ? "" : ";expires="+exdate.toUTCString());
            }

            function getCookie(c_name)
            {
              var cookies = document.cookie.split("; ");
              for(var idx_cookies in cookies)
              {
                var value = cookies[idx_cookies].split("=");
                if(value.length == 2 && value[0] == c_name)
                  return value[1];
              }
              return "";
            }

            function load_defaults()
            {
              var form = document.sms_form;
              form.userid.value = getCookie('userid');
              form.userpasswd.value = getCookie('userpasswd');
              form.from.value = getCookie('from');
              form.to.value = getCookie('to');
            }

            function save_defaults()
            {
              var form = document.sms_form;
              setCookie('userid', form.userid.value, 7);
              setCookie('userpasswd', form.userpasswd.value, 7);
              setCookie('from', form.from.value, 7);
              setCookie('to', form.to.value, 7);
            }

            function restore_desc(obj, desc)
            {
              if(obj.value == '')
              {
                obj.value = desc;
                obj.style.color = 'gray';
              }
            }

            function clear_desc(obj, desc)
            {
              if(obj.value == desc)
              {
                obj.value = '';
                obj.style.color = '';
              }
            }
          EOS
        end
        html.title { html.text 'KAIST 무료 문자' }
      end
      html.body(:onload => 'load_defaults();restore_all();') do
        html.h1 { html.text 'KAIST 무료 문자' }

        info = nil
        unless req.query.empty?
          result, info = KaistSMS.sms(req.query['userid'], req.query['userpasswd'], req.query['from'], req.query['to'], req.query['msg'])
          html.div do
            if result
              html.h2 { html.text '문자가 전송되었습니다.' }
            else
              html.h2 { html.text '문자 전송에 문제가 발생하였습니다.' }
            end
            html.p do
              html.text "남은 무료 문자: #{info[:quota]}개"
            end
          end
        end

        html.form(:name => 'sms_form', :method => 'post', :onsubmit => 'save_defaults()') do
          html.div(:style => 'padding-top:0.5em') do
            html.ul do
              html.li do
                html.label { html.text 'KAIST Mail 아이디' }
                html.input :type => 'text', :name => 'userid', :onfocus => 'clear_desc(this, "KAIST Mail 아이디")', :onblur => 'restore_desc(this, "KAIST Mail 아이디")'
              end
              html.li do
                html.label { html.text 'KAIST Mail 비밀번호' }
                html.input :type => 'password', :name => 'userpasswd', :onfocus => 'clear_desc(this, "KAIST Mail 비밀번호")', :onblur => 'restore_desc(this, "KAIST Mail 비밀번호")'
              end
              html.li do
                html.label { html.text '보내는 사람' }
                html.input :type => 'text', :name => 'from', :onfocus => 'clear_desc(this, "보내는 사람")', :onblur => 'restore_desc(this, "보내는 사람")'
              end
              html.li do
                html.label { html.text '받는 사람' }
                html.input :type => 'text', :name => 'to', :onfocus => 'clear_desc(this, "받는 사람")', :onblur => 'restore_desc(this, "받는 사람")'
              end
              html.li do
                html.label { html.text '문자 내용' }
                html.span(:style => 'margin-left:1em') do
                  html.span(:id => 'msg_byte') do
                    html.text '0'
                  end
                  html.text '/80 bytes'
                end
                html.textarea :name => 'msg', :onkeyup => 'return check_msg_byte(this);', :onfocus => 'clear_desc(this, "문자 내용")', :onblur => 'restore_desc(this, "문자 내용")'
              end
              html.li do
                html.input :type => 'submit', :value => '문자 전송'
              end
            end
          end
        end

        html.div(:style => 'margin-top:1em') do
          html.ul do
            html.li do
              html.a(:href => 'usage') do
                html.text '서비스 소개, 사용법, 유의사항'
              end
            end
            html.li do
              html.a(:href => 'developer') do
                html.text '제작자'
              end
            end
          end
        end

        unless req.query.empty?
          html.div(:style => 'margin-top:2em') do
            html.label { html.text 'Detail Status' }
            html.pre { html.text info.pretty_print_inspect }
          end
        end

        html.div(:class => 'footer', :style => 'margin-top:2em') do
          html.text 'GoN'
        end
      end
    end
  end
  res.body = builder.to_html
end

server.mount_proc('/robots.txt') do |req,res|
  res['ETag'] = nil
  res['Last-Modified'] = Time.now + 100**4
  res['Cache-Control'] = 'no-store, no-cache, must-revalidate, post-check=0, pre-check=0'
  res['Pragma'] = 'no-cache'
  res['Expires'] = Time.now - 100**4

  res.status = 200
  res['Content-Type'] = 'text/html'

  res.body = <<-EOS
User-agent: *
Disallow: /
  EOS
end

server.mount_proc('/usage') do |req,res|
  res['ETag'] = nil
  res['Last-Modified'] = Time.now + 100**4
  res['Cache-Control'] = 'no-store, no-cache, must-revalidate, post-check=0, pre-check=0'
  res['Pragma'] = 'no-cache'
  res['Expires'] = Time.now - 100**4

  res.status = 200
  res['Content-Type'] = 'text/html'

  builder = Nokogiri::HTML::Builder.new(:encoding => 'UTF-8') do |html|
    html.html do
      html.head do
        html.meta :'http-equiv' => 'Content-Type', :content => 'text/html; charset=utf-8'
        html.meta :name => 'viewport', :content => 'initial-scale=1.0; user-scalable=no; maimum-scale=1.0; minimum-scale=1.0; width=device-width'
        html.style do
          html.text <<-EOS
          *{margin:0;padding:0;font-family:Dotum,"돋움";}
          ul li{list-style:none;}
          ol{margin-left:2em;}
          input,textarea{border:1px solid;width:100%;font-size:20px;}
          textarea{height:5em;}
          body{padding:10px;}
          pre{border:1px solid;word-wrap:break-word;word-break:break-all;}
          .footer{text-align:center;border-top:1px solid;}
          a{text-decoration:none;}
          EOS
        end
        html.title { html.text 'KAIST 무료 문자' }
      end

      html.body do
        html.h1 { html.text 'KAIST 무료 문자' }
        html.h2 { html.text '서비스 소개' }
        html.ol do
          html.li do
            html.a(:href => 'http://mail.kaist.ac.kr') { html.text '카이스트 메일' }
            html.text '에서 제공하는 무료 문자 50개를 스마트 폰에서 더욱 쉽게 보낼 수 있도록 하는 서비스 입니다.'
          end
          html.li do
            html.text '이제 더 이상 스마트폰에서 들어가기 힘든 '
            html.a(:href => 'http://mail.kaist.ac.kr') { html.text '카이스트 메일' }
            html.text '에 들어가지 않고 간단히 문자를 보낼 수 있습니다.'
          end
          html.li do
            html.text '이 서비스는 KAIST 동아리 GoN에서 지원합니다.'
          end
        end
        html.h2 { html.text '사용법' }
        html.ol do
          html.li do
            html.text '모든 칸을 채웁니다.'
            html.ol do
              html.li do
                html.text 'Kaist Mail 아이디: '
                html.a(:href => 'http://mail.kaist.ac.kr') { html.text '카이스트 메일' }
                html.text '에 로그인 할 때 사용하는 아이디를 입력합니다.'
              end
              html.li do
                html.text 'Kaist Mail 비밀번호: '
                html.a(:href => 'http://mail.kaist.ac.kr') { html.text '카이스트 메일' }
                html.text '에 로그인 할 때 사용하는 비밀번호를 입력합니다.'
              end
              html.li do
                html.text '보내는 사람: 자신의 핸드폰 번호를 입력합니다.'
              end
              html.li do
                html.text '받는 사람: 문자를 받는 사람의 핸드폰 번호를 입력합니다.'
              end
              html.li do
                html.text '문자 내용: 보낼 문자 내용을 입력합니다. 80 bytes가 넘지 않도록 합니다.'
              end
            end
          end
          html.li do
            html.text '문자 전송 버튼을 누릅니다.'
          end
          html.li do
            html.text '문자 전송이 성공하면 "문자가 전송되었습니다."라는 메세지가 나옵니다.' 
          end
          html.li do
            html.text '문자 전송에 문제가 생기면 "문자 전송에 문제가 발생하였습니다."라는 메세지가 나옵니다.' 
          end
        end

        html.h2 { html.text '유의사항' }
        html.ol do
          html.li do
            html.text '문자 내용은 80 bytes 까지만 가능합니다. 80 bytes가 넘는 경우 문자 내용의 처음 80 bytes 까지만 전송하고 문자 전송에 문제가 발생하였다고 나옵니다.'
          end
        end

        html.div(:class => 'footer', :style => 'margin-top:2em') do
          html.text 'GoN'
        end
      end
    end
  end
  res.body = builder.to_html
end

server.mount_proc('/developer') do |req,res|
  res['ETag'] = nil
  res['Last-Modified'] = Time.now + 100**4
  res['Cache-Control'] = 'no-store, no-cache, must-revalidate, post-check=0, pre-check=0'
  res['Pragma'] = 'no-cache'
  res['Expires'] = Time.now - 100**4

  res.status = 200
  res['Content-Type'] = 'text/html'

  builder = Nokogiri::HTML::Builder.new(:encoding => 'UTF-8') do |html|
    html.html do
      html.head do
        html.meta :'http-equiv' => 'Content-Type', :content => 'text/html; charset=utf-8'
        html.meta :name => 'viewport', :content => 'initial-scale=1.0; user-scalable=no; maimum-scale=1.0; minimum-scale=1.0; width=device-width'
        html.style do
          html.text <<-EOS
          *{margin:0;padding:0;font-family:Dotum,"돋움";}
          ul li{list-style:none;}
          ol{margin-left:2em;}
          input,textarea{border:1px solid;width:100%;font-size:20px;}
          textarea{height:5em;}
          body{padding:10px;}
          pre{border:1px solid;word-wrap:break-word;word-break:break-all;}
          .footer{text-align:center;border-top:1px solid;}
          a{text-decoration:none;}
          EOS
        end
        html.title { html.text 'KAIST 무료 문자' }
      end

      html.body do
        html.h1 { html.text 'KAIST 무료 문자' }
        html.h2 { html.text '제작자' }
        html.ul do
          html.li do
            html.text '이민우. ermaker gmail com.'
          end
        end

        html.div(:class => 'footer', :style => 'margin-top:2em') do
          html.text 'GoN'
        end
      end
    end
  end
  res.body = builder.to_html
end


trap('INT') { server.shutdown }
server.start
