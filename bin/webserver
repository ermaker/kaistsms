#!/usr/bin/env ruby

require 'rubygems'
require 'nokogiri'
require 'webrick'
require 'kaistsms'
require 'pp'

server = WEBrick::HTTPServer.new :Port=>(ARGV[0]||4225).to_i

server.mount_proc('/') do |req,res|
  res['ETag'] = nil
  res['Last-Modified'] = Time.now + 100**4
  res['Cache-Control'] = 'no-store, no-cache, must-revalidate, post-check=0, pre-check=0'
  res['Pragma'] = 'no-cache'
  res['Expires'] = Time.now - 100**4

  res.status = 200
  res['Content-Type'] = 'text/html'

  builder = Nokogiri::HTML::Builder.new(:encoding => 'UTF-8') do |html|
    html.html do
      html.head do
        html.meta :'http-equiv' => 'Content-Type', :content => 'text/html; charset=utf-8'
        html.meta :name => 'viewport', :content => 'initial-scale=1.0; user-scalable=no; maimum-scale=1.0; minimum-scale=1.0; width=device-width'
        html.style do
          html.text <<-EOS
          *{margin:0;padding:0;font-family:Dotum,"돋움";}
          li{list-style:none;}
          label{cursor:pointer;}
          input,textarea{border:1px solid;width:100%;font-size:20px;}
          textarea{height:5em;}
          body{padding:10px;}
          pre{border:1px solid;word-wrap:break-word;word-break:break-all;}
          .footer{text-align:center;border-top:1px solid;}
          EOS
        end
      end
      html.body do
        html.h1 { html.text 'KAIST 무료 문자' }

        info = nil
        unless req.query.empty?
          result, info = KaistSMS.sms(req.query['userid'], req.query['userpasswd'], req.query['from'], req.query['to'], req.query['msg'])
          html.div do
            if result
              html.h2 { html.text '문자가 전송되었습니다.' }
            else
              html.h2 { html.text '문자 전송에 문제가 발생하였습니다.' }
            end
            html.p do
              html.text "남은 무료 문자: #{info[:quota]}개"
            end
          end
        end

        html.form(:method => 'post') do
          html.div(:style => 'padding-top:0.5em') do
            html.ul do
              html.li do
                html.label { html.text 'KAIST Mail 아이디' }
                html.input :type => 'text', :name => 'userid', :value => req.query['userid']
              end
              html.li do
                html.label { html.text 'KAIST Mail 비밀번호' }
                html.input :type => 'password', :name => 'userpasswd', :value => req.query['userpasswd']
              end
              html.li do
                html.label { html.text '보내는 사람' }
                html.input :type => 'text', :name => 'from', :value => req.query['from']
              end
              html.li do
                html.label { html.text '받는 사람' }
                html.input :type => 'text', :name => 'to', :value => req.query['to']
              end
              html.li do
                html.label { html.text '문자 내용' }
                html.textarea :name => 'msg'
              end
              html.li do
                html.input :type => 'submit', :value => '문자 전송', :style => '2em'
              end
            end
          end
        end

        unless req.query.empty?
          html.div(:style => 'padding-top:2em') do
            html.label { html.text 'Detail Status' }
            html.pre { html.text info.pretty_print_inspect }
          end
        end

        html.div(:class => 'footer', :style => 'margin-top:2em') do
          html.text 'GoN'
        end
      end
    end
  end
  res.body = builder.to_html
end

server.mount_proc('/robots.txt') do |req,res|
  res['ETag'] = nil
  res['Last-Modified'] = Time.now + 100**4
  res['Cache-Control'] = 'no-store, no-cache, must-revalidate, post-check=0, pre-check=0'
  res['Pragma'] = 'no-cache'
  res['Expires'] = Time.now - 100**4

  res.status = 200
  res['Content-Type'] = 'text/html'

  res.body = <<-EOS
User-agent: *
Disallow: /
  EOS
end

trap('INT') { server.shutdown }
server.start
